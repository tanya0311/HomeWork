{"version":3,"sources":["components/Message/Message.module.css","components/TodoList/TodoList1.module.css","components/Message/Message.tsx","components/TodoList/TodoList1.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","classes","MessageImg","src","alt","MessageText","userMessage","userName","name","userText","text","time","Todolist","TodoList","title","type","tasks","map","t","key","id","checked","isDone","p","delete","onClick","removeTask","btnTL","changeFilter","btn","App","useState","v1","setTasks","filter","setFilter","tasksForTodoList","filteredTasks","newFilterValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,YAAc,6BAA6B,YAAc,6BAA6B,SAAW,0BAA0B,SAAW,0BAA0B,KAAO,wB,gBCArQD,EAAOC,QAAU,CAAC,SAAW,4BAA4B,KAAO,wBAAwB,OAAS,0BAA0B,MAAQ,yBAAyB,IAAM,yB,2LC2BnJC,EAlBC,SAACC,GACb,OACI,yBAAKC,UAAWC,IAAQH,SACpB,yBAAKE,UAAWC,IAAQC,YACpB,yBACIC,IAAI,2GACJC,IAAI,YAEZ,yBAAKJ,UAAWC,IAAQI,aACpB,yBAAKL,UAAWC,IAAQK,aACpB,wBAAIN,UAAWC,IAAQM,UAAWR,EAAMS,MACxC,uBAAGR,UAAWC,IAAQQ,UAAWV,EAAMW,OAE3C,yBAAKV,UAAWC,IAAQU,MAAOZ,EAAMY,S,gBCA9C,SAASC,EAASb,GAGrB,OAAO,yBAAKC,UAAWC,IAAQY,UAC3B,4BAAKd,EAAMe,OACX,2BAAOC,KAAK,SAMZ,qCAIA,4BAEQhB,EAAMiB,MAAMC,KAAI,SAACC,GAAD,OAAO,wBAAIC,IAAKD,EAAEE,IAC1B,2BAAOL,KAAK,WAAWM,QAASH,EAAEI,SAClC,uBAAGtB,UAAWC,IAAQS,MAAOQ,EAAEJ,MAA/B,IAAsC,8BAAOI,EAAEK,IAC/C,4BAAQvB,UAAWC,IAAQuB,OACnBC,QAAS,WACL1B,EAAM2B,WAAWR,EAAEE,MAF/B,gBAShB,yBAAKpB,UAAWC,IAAQ0B,OACpB,4BAAQF,QAAS,WACb1B,EAAM6B,aAAa,QACpB5B,UAAWC,IAAQ4B,KAFtB,OAIA,4BAAQJ,QAAS,WACb1B,EAAM6B,aAAa,cACpB5B,UAAWC,IAAQ4B,KAFtB,aAIA,4BAAQJ,QAAS,WACb1B,EAAM6B,aAAa,cACpB5B,UAAWC,IAAQ4B,KAFtB,e,YCHGC,MAnDf,WAAgB,IAAD,EAGaC,mBAAS,CAC7B,CAACX,GAAIY,cAAMlB,MAAO,WAAYS,EAAG,QAASD,QAAQ,GAClD,CAACF,GAAIY,cAAMlB,MAAO,UAAWS,EAAG,MAAOD,QAAQ,GAC/C,CAACF,GAAIY,cAAMlB,MAAO,WAAYS,EAAG,MAAOD,QAAQ,GAChD,CAACF,GAAIY,cAAMlB,MAAO,QAASS,EAAG,SAAUD,QAAQ,KAPzC,mBAGNN,EAHM,KAGCiB,EAHD,OAYeF,mBAA2B,OAZ1C,mBAYNG,EAZM,KAYEC,EAZF,KAqBPC,EAAmBpB,EAevB,MAde,cAAXkB,IACAE,EAAmBpB,EAAMkB,QAAO,SAAAhB,GAAC,MAAY,UAARA,EAAEK,MAE5B,cAAXW,IACAE,EAAmBpB,EAAMkB,QAAO,SAAAhB,GAAC,OAAiB,IAAbA,EAAEI,WAWvC,yBAAKtB,UAAU,OACX,kBAACY,EAAD,CACIE,MAAM,WACNE,MAAOoB,EACPV,WAXZ,SAAoBN,GAChB,IAAIiB,EAAgBrB,EAAMkB,QAAO,SAAAhB,GAAC,OAAIA,EAAEE,KAAOA,KAC/Ca,EAASI,IAUDT,aA3BZ,SAAsBU,GAClBH,EAAUG,MA8BN,kBAAC,EAAD,CAAS9B,KAAK,WAAWE,KAAK,kOAAmDC,KAAK,YCzC9E4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bacb0d70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__L9LXR\",\"MessageImg\":\"Message_MessageImg__217vd\",\"MessageText\":\"Message_MessageText__2Sizf\",\"userMessage\":\"Message_userMessage__1zin8\",\"userName\":\"Message_userName__3MjTx\",\"userText\":\"Message_userText__1Vrwv\",\"time\":\"Message_time__2LRPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList1_TodoList__1Ccbf\",\"text\":\"TodoList1_text__DvQLb\",\"delete\":\"TodoList1_delete__Aiw_j\",\"btnTL\":\"TodoList1_btnTL__20tof\",\"btn\":\"TodoList1_btn__3zTT4\"};","import React from 'react';\nimport classes from './Message.module.css';\n\n\ntype MessageType = {\n    name: string,\n    text: string,\n    time: string\n}\n\nconst Message = (props:MessageType) => {\n    return (\n        <div className={classes.Message}>\n            <div className={classes.MessageImg}>\n                <img\n                    src=\"https://mmo-dev.info/media/%D0%9C%D0%BE%D1%8F-%D0%B0%D0%B2%D0%B0%D1%82%D0%B0%D1%80%D0%BA%D0%B0.4077/full\"\n                    alt=\"avatar\"/>\n            </div>\n            <div className={classes.MessageText}>\n                <div className={classes.userMessage}>\n                    <h1 className={classes.userName}>{props.name}</h1>\n                    <p className={classes.userText}>{props.text}</p>\n                </div>\n                <div className={classes.time}>{props.time}</div>\n            </div>\n        </div>\n    )\n}\nexport default Message;","import React, {useState} from 'react';\nimport classes from './TodoList1.module.css';\n\n\ntype TaskType = {\n    id: string\n    title: string\n    p: string\n    isDone: boolean\n    // name: string\n}\n\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string) => void\n    changeFilter: (newFilterValues: FilterValuesType) => void\n    addTask: (newTaskTitle: string) => void\n}\n\nexport type FilterValuesType = 'all' | 'important' | 'completed'\n\n\nexport function Todolist(props: PropsType) {\n    // let [newTaskTitle, setNewTaskTitle] = useState(' ');\n\n    return <div className={classes.TodoList}>\n        <h1>{props.title}</h1>\n        <input type=\"text\"\n               // value={newTaskTitle}\n               // onChange={ (e) => {setNewTaskTitle(e.currentTarget.value)} }\n               // onKeyPress={(e) => {if (e.charCode === 13){props.addTask(newTaskTitle);\n               //     setNewTaskTitle(' ') }}}\n        />\n        <button\n            // onClick={() => {props.addTask(newTaskTitle);\n            // setNewTaskTitle(' ') }}\n            >+</button>\n        <ol>\n            {\n                props.tasks.map((t) => <li key={t.id}>\n                        <input type=\"checkbox\" checked={t.isDone}/>\n                        <p className={classes.text}>{t.title} <span>{t.p}</span></p>\n                        <button className={classes.delete}\n                                onClick={() => {\n                                    props.removeTask(t.id)\n                                }}> delete\n                        </button>\n                    </li>\n                )\n            }\n        </ol>\n        <div className={classes.btnTL}>\n            <button onClick={() => {\n                props.changeFilter('all')\n            }} className={classes.btn}>All\n            </button>\n            <button onClick={() => {\n                props.changeFilter('important')\n            }} className={classes.btn}>Important\n            </button>\n            <button onClick={() => {\n                props.changeFilter('completed')\n            }} className={classes.btn}>Completed\n            </button>\n        </div>\n    </div>\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Message from \"./components/Message/Message\";\nimport {Todolist, FilterValuesType} from './components/TodoList/TodoList1';\nimport {v1} from \"uuid\";\n\n\nfunction App() {\n\n\n    let [tasks, setTasks] = useState([\n        {id: v1(), title: \"homework\", p: \"hight\", isDone: true},\n        {id: v1(), title: \"reading\", p: \"low\", isDone: false},\n        {id: v1(), title: \"cleaning\", p: \"low\", isDone: false},\n        {id: v1(), title: \"video\", p: \"middle\", isDone: true},\n        // {id: v1(), name: 'Vasia'}\n    ]);\n\n\n    let [filter, setFilter] = useState<FilterValuesType>('all');\n\n\n    function changeFilter(newFilterValues: FilterValuesType) {\n        setFilter(newFilterValues);\n    };\n\n\n\n    let tasksForTodoList = tasks;\n    if (filter === 'important') {\n        tasksForTodoList = tasks.filter(t => t.p === \"hight\")\n    }\n    if (filter === 'completed') {\n        tasksForTodoList = tasks.filter(t => t.isDone === true)\n\n    }\n\n    function removeTask(id: string) {\n        let filteredTasks = tasks.filter(t => t.id !== id);\n        setTasks(filteredTasks);\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Todolist\n                title=\"TodoList\"\n                tasks={tasksForTodoList}\n                removeTask={removeTask}\n                changeFilter={changeFilter}\n\n            />\n\n            <Message name=\"Tatsiana\" text=\"100% где-то могла накосячить, но буду стараться)\" time=\"20:00\"/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}